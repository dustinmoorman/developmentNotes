Meteor notes!

== What is Meteor?

two things:

	- A lib of prewritten packages, self-contained modules that you might need in a realtime app. Several included toolsets of functionality you might use in any app running with meteor. (Ex - webapp, templating, email / Meteor Account series - account-password, accounts-facebook)


	- A command line tool called `meteor`, which is a build tool like make or rake, or the internals of Visual Studio. Carries out any necessary build steps like package fetching or building npm modules.


The goal of Meteor is that everything should work identically in the browser and on the server. (Wherever it should work identically and make sense.)

* Note - check out Meteorite.


== Application Structure

	A meteor application is a mix of javascript that runs inside a client web browser, JS that runs on the meteor server in a Node.js container and all the supporting HTML fragments, CSS, and static assets.

	Meteor automates the packaging and transmission of these different components.

	Meteor grabs all Javascript files except those stored in the following directories:

	- client
	- public
	- private

	Then loads them into a Node.js server instance inside a fiber.

	* In meteor, your server code runs in a single thread per request, not in the asynchronous callback style of typical Node. The developers felt a linear execution model a better fit for the typical server code in a Meteor Application.

	** Meteor gathers files under the `private` subdirectory and makes the contents of these files available to server code via the `Assets` API. This is a place where files should be stored for access by server code, but not provided to the client. MongoDB or database / data files belong here.

	** Meteor gathers any JS files in your tree, except in server, public, and private subdirectories for the client. It minifies this bundle and serves it to each new client. This means you can use a single JS file for your entire application or break it apart into a neat tree structure.

	** Some JS files only work when placed in the client/compatibility subdirectory. Files in this directory are executed without being wrapped in a new variable scope (interesting to know). These files are also executed before other client-side JS files.

Files outside the client, server, and tests subdirectories are loaded on both the client and the server. This is a great area for model definitions and other functions. Meteor provides the variables `isClient` and `isServer` so that code can alter its behavior depending on whether it's running on the client or the server.

	** Any code you want to keep away from the client belongs in the `server` directory. Passwords or Authentication mechanisms should be kept here.

In Development mode, JS and CSS files are sent individually to aid in debugging.




