DallasJS 
9/4/2014

Cloud computing has turned computing into a utility.

(Video Stephen Fry Explains Cloud Computing - a must watch)

20% of the top technology companies have moved to virtualizing.

high emphasis on pay per use 

Treat servers as cattle, not pets

pets are 
- cutely named
- unique, special, cared for
- taken care of when ill

cattle are
- called by numbers,
- replaced when ill,
- you need more, you buy more

Automate, dont document.
- automate network creation
- installation of software
- error detection
- error handling

"Friends don't let their friends build data centers"
	- Charles Phillips, CEO, Infor
	AWS Summit 2014

AWS 
- largest provider
- streamlined interface
- most mature automation.......... for NOW!
- features

Architecting for AWS

3 step process
---------------
1 replace tiers with AWS services
2 secure
3 leverage elasticity

the evolution phase

those who find cloud "expensive" or "not for them" are in the first tier of cloud integration.

Worry list
-----------
- Db backup
- Asset backup
- Web uptime
- App uptime
- DB uptime
- Static page uptime
- traffic spikes
- DoS attacks
- Security breach


DoS attacks - Amazon will ban attacking IPs if a DoS attack is detected.

NoSQL - DynamoDB
Queuing - SQS (Simple Queue Service)
Caching - Elasticache
page caching - Cloudfront ('varnish')

Key features are high availability and redundancy of data.

RDS - MySQL, restricted to a GUI, but the application will be available to port 3306.

Amazon manages RDS. Same for Elasticache.

CloudFront - page caching and CDN. In the same dashboard as the rest of the infrastructure, so it makes integration easy. Cloudflare is a good alternative.

Page level caching is one of the most underrated features in web development, and Cloudfront costs very low per month, relatively high traffic websites will have a cloudfront bill in the $1.50 range/mo.
	- you pay by storage, its $1/gb a month.

Caching is very cost effective if most pages are served by CloudFront, usage costs of a web server are reduced.

Openstack Swift is a good S3 alternative.

Amazon RDS
- MySQL
- Postgres
- SQL Server
- Oracle

SQL server being the weakest implementation within RDS.

Cloudfront (think varnish)
- geographically distributed.

Elasticache
- in-memory caching tier for your app
- spin up with a single click
- redis and memcached are available
- high availability

S3
- high availability
- fast

DynamoDB
-NoSQL as a service

Route53 - amazon dns server
SNS - server to server and server to man communication
SQS - on demand queuing service
SWF - simple workflow

SWF is a workflow engine. (think squigg)  

Whether or not to replace a tier?
- Does high availability matter?
- Can i achieve the uptime? will it be cheaper?
- Will I save in terms of code changes?

Amazon instances are by default available to the public world, you must take steps to lock it down.

Amazon provides 

-Security groups (attached to every server)
	- which servers can access this server,
	- which ports they can access it with
	- only whitelist, no blacklist - bad for DoS
-VPC (Virtual Private Cloud)
	- anything you spin up in the vpc gets a private IP and not a public IP
	- Cloudfront would become the "front door"
	- app server, RDS, etc, are protected by the VPC

Using security groups, the web server could talk only to the app server, and the app server could talk explicitly to the RDS instance and Elasticache, but nodes like Elasticache would only talk to the app server. 
	- ie, nodes in the vpc should be locked down via security groups to talk to only the nodes you expect the server to talk to.



ELB - Elastic Load Balancer, also a good added security measure.

Best way to get in to the VPC is via VPN.

NAT servers can be dropped in to VPC's to facilitate internet access within a VPC.

Nice
- anything inside the VPC can talk to the outside world using the NAT
- servers within the VPC are protected

Not nice
- NAT could turn in to a single point of failure for the infrastructure
- redundant NATS could be a solution

ASG - Autoscaling groups

1. autoscale infrastructure based on traffic

- IP addresses will be assigned randomly
- instances are controlled by some intelligence that you parameterize
- instances will be in and out
- mindset changes in the code will need to take place to leverage (usually)
- but this is where the cloud shines

2. facilitate high availability

- designed to keep at least one server up
- will restart if something unrecoverably happens

Dealing with spikes

- usually caches will absorb spikes
- if it makes it back to the db, you can use read-replicas.
- writes will use one, but db read can scale up.

Provision IOPS (relatively new) (expensive) (racks up fast) allows you to control the db pipe.

Scaling services
- Autoscaling groups (you create teh image, the group, etc)
- Elastic Beanstalk (one size fits all, drop in and May work (may not))
- OpsWorks (integration with Chef to specify what's needed. Will spin up a new server that meets this criteria)

puppet integration is "on the way"

CloudFormation
- Amazon specific
- Infrastructure-as-code
- build AWS resources with one click
- push updates to the stack conveniently
- any amazon resource can be specified, including startup scripts
- takes about 7 mins to spin up an entire network, from nothing.
- true, full automation
- updates are convienently pushable
- differential update
- raises bus factor of infrastructure (for small business)
- not easy to start with, has a learning curve, but pays off in the long run

Autoscaling
- separate stateful and state-less services
- do not rely on server IP addresses being fixed
- bake your server's images

Instead of relying on IP's, update DNS entries to point to those acting servers.

client-db.clientname.com => 10.10.x.x

Pretty for the code, harmless for attackers to get the hostname because it's a private IP address that it needs to resolve to.

Make sure the image you provide can start itself and run its applications at startup.

Take aways
- servers are cattle, always assume there will be more in the end than what you've started with
- dont use IP and host name in the code (route53 DNS above is ok, not the actual AWS hostname)
- use an existing service whenever possible
- dont mix stateful and stateless services
- script application deployment or use configuration management
- setup local developer environments (dont expose this)

Docker

"Using Docker to Improve Web Developer Productivity" - need to google that

