Lonestar PHP 2013
Bob Majdak - Event Driven applications

Baseball reference, baseball is an event-driven game.

- page is hit, instance begins

-- init

-- configure

-- setup

-x Ready

	- Input (handle GET, POST requests)
	- Main (Do what ya do)
	- Output (toss it out to the browser, themed)

- Shutdown	


These events happen on each request.

Your app, above, is the indented portion (for examples like Zend Framework and CodeIgniter)

- losely syncronous

	based on a solid plug-in system

- asyncrynous 

	based on a queue of events that can run individually

Loosely Synchronous Events

	- symfony2 eventDispatcher (standalone)
	- Monticello Ki (standalone)
	- Yii (full stack)
	- Codeigniter-Events (add on)

	- wordpress (LOLStack)

How to accidentally a plug in system with events and things

	- announce you're going to do something before you do
	- announce you just set a new value after you set it
	- announce whenever an app milestone has been reached
	- announce when an error occurs

Plugins can watch for all these things and deal with them accordingly.

Causing events to happen

-Emitted
-Signaled
-Thrown
-Sent
-Announced


Check out monticello Ki

if something unexpected happened, throw a message for other objects to see and use

Make milestones visibile, etc

React PHP 

Queue Management

	- a stand alone service that has one job: Keep a list of things that
	need to get done and tell clients the next thing to do when you 

- Start svc
- begin listening for clients
- supports multiple backends
	- PHP Streams
	= LibEvent
	- LibEV

You can built TCP servers in REACT to handle these queues.


Action Items: 

	Use React, build a server/client and test it out.


React\ScketClient\Connector
React\HTTP\Server
React\HttpClient








moving fast on the slides..................................... >:(



