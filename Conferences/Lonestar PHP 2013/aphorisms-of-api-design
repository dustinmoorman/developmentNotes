Lonestar PHP 2013
Aphorisms of API design
Larry Garfield

These are not rules, they're guidelines.

Stay plithy my friends.

Learn the rules like a pro so you can break them like an artist - Picasso

If there are multiple implementations, then there are infinite implementations.

Machine names > Constants

Booleans are not either/or, they are There or Not. True or False.

"One is a special case of Many" - Garfield.

Aphorism #1 - N is the only number.

IF you're going to support any number of anything, make it N. Anything less than N will be exploited.

Don't plan for everything that can happen.

Plan for how it will break.

Good API's are picky

"A good programmer is someone who always looks both ways before crossing a one-way street" 

Aphorism #2 - Fail fast, fail cheap, fail easily

IF you can't document your code, you don't fully understand it.

If you can't document it, how can I use it?

Lack of comments indicate
- lazy
- indifferent
- lack of comprehension


What to document - 

Everything.


APHORISM #3 - Docs or it didn't happen

Users !== Programmers

a UI is a client of your API.

TESTS or it didn't happen!

A website is not an API, a website USES an API. 

An API does not need a website, it runs just fine.


"You're not done until you have three implementations"

1. Unit tests
2. Web services
3. Command line
4. Web Site

Business Logic divorced from the user interface.

Leverage existing Patterns
-mimicry is the highest form of flattery
	- if you find something you like, use it! build like it!
-plus it's easy to remember.
-less work for you
	- you dont have to re-think, just implement

Existing Patterns

Design Patterns

Use what is built, it saves time.

The best API is the one you didn't have to spend time to design.

97 Things every software developer should know.

Don't make decisions if you don't have to.
Make changing your mind cheap.

Because you will change your mind.

You can only change what is encapsulated.

Interfaces are your friend. Carve them out!

Use existing standards.

By making your system loosely coupled, it's really easy to be agile and not rewrite the whole systems when components change.


Separations of concern

-Interface driven development
-Context-free (stateless) sevices
-Single responsibility principle
-Dependency Injection

Aphorism #6 - Avoid making decisions if you possibly can


Delegation adds indirection

Abstraction is not free

Micro level performance hit

__call() is expensive as 3 function calls
call_user_func_array() is expensive as 3 function calls

The unavoidable price of reliability is simplicity

Find existing Wheels!

Composer / Packagist.org
Symfony2 Components
Zend Framework 2

USE EXISTING PLATFORMS

symfony2
zendframework
cakephp
drupal
do not use your from-scratch system here!

Silex

Learn your HTTP!
REST - "I can go home and rest because that shit has already been written"

Learn from existing wheels!

PECL
jQuery
Wordpress
Symfony2, ZF, etc
Java
Design Patterns

DROOOPAL 8

a bunch of symfony being used

Guzzle - Outgoing HTTP Requests!

Easy RDF
Assetic
Twig

no software project in the world needs EGO


Aphorism #8 - you are not a special and unique snowflake

97 things every software architect should know - richard monson-haefel
garfieldtech.com/
