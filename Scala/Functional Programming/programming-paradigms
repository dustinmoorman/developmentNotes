Programming Paradigms
====================

Paradigm: In science, a paradigm describes distinct concepts
or thought patterns in some scientific discipline.

Main programming paradigms:
	- imperative programming
	- functional programming
	- logic programming

Orthogonal to it:
	- object-oriented programming

Object Oriented programming can be integrated with functional 
programming, it follows the imperative programming paradigm
traditionally.

Review: Imperative programming

Imperative programming is about
	- modifying mutable variables,
	- using assignments
	- and control structures such as if-then-else, loops, 
	  break, continue, return

The most common informal way to understand imperative programs 
is as instruction sequences for a Von Neumann computer.

Imperative Programs and Computers

There's a strong correspondence between
	Mutable variables	=>	memory cells
	Variable dereferences	=>	load instructions
	Variable assignments	=>	store instructions
	Control structures	=>	jumps

Problem: Scaling up. How can we avoid conceptualizing programs
word by word?

Reference: John Backus, Can Programming Be Liberated from the
von Neumann Style? Turing Award Lecture 1978.

John Backus invented Fortran in the 1950's.

He noted that imperative programming was running out of steam. 

In the end, pure imperative programming is limited by the "Von
Neumann" bottleneck.
	
	>> One tends to conceptualize data structures word-by-word.

We need other techniques for defining high-level abstractions 
such as collections, polynomials, geometric shapes, strings, 
documents. 

Ideally: Develop 'theories' of collections, shapes, strings.

What is a Theory?

A theory consists of 
	- one or more data types
	- operations on these types
	- laws that describe the relationships between
	  values and operations

Normally, a theory in mathematics does not describe mutations!

Theories without Mutation

For instance, the theory of polynomials defines the sum of 
two polynomials by laws such as:

	(a*x + b) + (c*x + d) = (a+c)*x + (b+d)

But it does not define an operator to change a coefficient while
keeping the polynomial the same!

Whereas in an imperative program, one can write:

	class Polynomial { double[] coefficient ; }

	Polynomial p = ...;
	
	p.coefficient[0] = 42;

The theory of strings defines a concatenation operator ++ which is
associative:

	(a ++ b) ++ c = a ++ (b ++ c)

But it does not define an operator to change a sequence element
while keeping the sequence the same!

(This one, some languages do get right; e.g. Java's strings are immutable)

Consequences for Programming

If we want to implement high-level concepts following their
mathematical theories, there's no place for mutation.

	- The theories do not admit it.
	- Mutation can destroy useful laws in the theories.

Therefore, let's
	
	- concentrate on defining theories for operators expressed
	  as functions,
	- avoid mutations,
	- have powerful ways to abstract and compose functions.

Functional Programming

- In a restricted sense, functional programming means programming without
mutable variables, assignments, loops, and other imperative control structures.
- In a wider sense, functional programming means focusing on the functions.
- In particular, functions can be values that are produced, consumed, and composed.
- All this becomes easier in a functional language.

Functional Programming Languages

- A functional programming language enables the construction of elegant programs that
focus on functions.
- In particular, functions in a FP language are first-class citizens.

This means
	
	- they can be defined anywhere, including inside other functions
	- like any other value, they can be passed as parameters to functions
	  and returned as results
	- as for other values, there exists a set of operators to compose functions

Some functional programming languages

In the restricted sense:
	- Pure Lisp, XSLT, XPath, XQuery, FP
	- Haskell (without I/O Monad or UnsafePerformIO)

In the wider sense:
	- Lisp, Scheme, Racket, Clojure
	- SML, Ocaml, F#
	- Haskell (full language)
	- Scala
	- Smalltalk, Ruby

Books on Functional Programming

	Structure and Interpretation of Computer Programs. Harold
	Abelson and Gerald J. Sussman. 2nd edition. MIT Press 1996.

	Programming in Scala. Martin Odersky, Lex Spoon, and Bill Venners. 
	2nd edition.

	Scala for the impatient.

	Orielly book - Programming in Scala.

	Scala in depth.

Why functional programming?
	
	Functional programming is becoming increasingly popular, because it offers
	the following benefits.
	
	- simpler reasoning principles
	- better modularity
	- good for exploiting parallelism for multicore and cloud computing.

	For more - see Martin Odersky's 2011 Oscon Java Keynote - 
	"Working hard to keep it simple" (16.30 minutes)

	Youtube titled: O'Reilly OSCON Java 2011: Martin Odersky, 
	"Working Hard to Keep It Simple"
