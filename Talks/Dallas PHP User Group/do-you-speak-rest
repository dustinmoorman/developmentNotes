Do you speak REST?
Dallas PHP User Group
Tuesday, June 11th 2013
---------------------------------

Overview of HTTP and REST APIs

bit.ly/11dyflZ

Representational state transfer

-set of ideals and principles to build an API
-built around HTTP

GOALS:

- making sure clear separation of client /server

clients: not concerned about storage
server: not caring about user state / ui

Client and server should be able to work without each other.

== Stateless

Each request should be idempotent and self-contained.

-the same request should make the same results no matter how many times it's repeated

Example of state: Cookie storage

Relying on sesssions or cookies for things to happen.
Rest should not use cookies or sessions. Needs to happen in the request.


Cacheable

Responses should be cacheable or server declare no caching

Layered

Restful API should be able to be layered. Shouldn't know if it's talking to the cactual server or a proxy/load balancer

Uniform Interface *** Most major of principle

- requests should be uniform
- reuse the HTTP interface, only extend where absolutely necessary

utilizes HTTP verbs

this allows other developers who know HTTP to understand a sort of way it works

------------

Represent:
RESOURCES
DOCUMENTS
PRODUCTS
PEOPLE

Based around a resource.

I have a resource, I need to update a resource, I need to delete a resource, etc.


Uniformity, building off of HTTP - keeping things in that concept.

== VERBS ==

GET
PUT
DELETE
POST
PATCH
TRACE
OPTIONS
CONNECT



----
GET request used by default.
PATCH gaining popularity

CONNECT (https tunnel)   // these two used by
TRACE (basically a ping) // browsers mainly

-------

GET /v1/user?a=1 Get all users
GET /v1/user/1 	 Get User #1
PUT /v1/user/1 Overwrite user1
POST /v1/user create new user
DELETE /v1/user/1 delete user 1
PATCH /v1/user/1 partially update user 1

if you can say it's restful, you may not know what it is used for, but you will know what these methods SHOULD do.

------

HTTP Status Codes

2xx ------> OK
3xx ------> Redirect
4xx ------> Your bad
5xx ------> Our bad


== 2xx status codes

201 - Created (a "resource" is created)
202 - Accepted (but not created - think queueing)

== 3xx status codes

301 - Moved Permanently
302 - Found (temporary readiness)
307 - Temporary Redirect (same as 302, but demands that same request method be used in the next request)

== 4xx status code

401 - Not Authorized (sent before www-authenticate)
403 - Forbidden (user has authenticated, but is not authorized to use something)
404 - Not Found
410 - Gone (at some point there was a resource here, but it's been archived/deleted/expired and is no longer here)

== 5xx status code

501 - Not Implemented (API does not support the method beign requested - GET PUT DELETE POST PATCH etc)
502 - Service Unavailable (timeout - response given for operation exceeds request limit)



Accept HEader
 
GET /v1/user/3 HTTP1.1

Accept: application/json
	application/json, application/xml
	application/json;q=0.9, application/xml;q=0.5
	text/*;q=0.9, application/*;q=0.5


q === Quality

API should respond with 406 if it can't meet accept.


Accept-Encoding: gzip
Accept-Language: en-gb;q=0.8, en;q=0.5
Accept-Charset: ISO-8859-1, UTF-8

API should respond with 406 if it can't meet accept;

Content

HTTP1.1 200 OK
Content-Type: application/json
Content-Encoding: gzip
Content-Language: en-gb

Always set Content-Type!!!

Retry-After: 120 <------- wait in seconds
: or you could set in full dates


Retry after can also be used with 300 status codes It tells the client how long to wait for the redirect

X-HTTP-Method-Override

PUT /v1/user/2 HTTP1.1
X-HTTP-Method-Override: PATCH
{title:"Executive synergy solutions director"}




Versioning
https://mathieu.fenniak.net/aint-nobody-got-time-for-that-api-versioning/


lols

Prefered way of versioning is the url


Using PUT in PHP - use curl



