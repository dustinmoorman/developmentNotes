Lonestar PHP
Profiling PHP Applications

PHP optimisation tips

- echo faster than print
- pre implementing is faster than post implementing (++i)


Premature Optimisation is the root of all evil - Donald Knuth

Before you optimise
- find out if things are running slow
- find out whether it is the code
- understand your code, application and execution paths
- Find out which parts of the code are slow
- find out what you can optimise

Seige
Create a file with URLS

dr.nl/
dr.nl/sp-tx/
dr.la/ds-re/

seige -c 40 -r 10 -f /tmp/urls.txt

Learn to use Seige! Supply URL List for each access point of an application and test it all!

Is it my code that's slow?
- the retrieval from the DB is slow
- there is lots of I/O
- Your code is slow
- The system is busy with other things
- and don't forget the front end performance.

vmstat 

Virtual Memory Statistics

- doesn't seem to be available on the mac by default. Might exist out there in the world ported.

VMSTAT can show how your memory is being used, it can also show you CPU usages.

If the wait > 10, IO BOUND

CPU is close to 74+22, CPU BOUND

Database specific tools

mongostat

Works in the same way as vmstat, but for Mongo instead of the system.

I/O into the Mongo database, etc. 

Good to implement into monitoring tools!!!!

Understand your code, application and execution paths

In-code tools:

- add timing points

External tools:

- basic overview: inclued  -------------------- Not a typo :)
- deep details: xdebug

XDEBUG

- has a firefox plugin, enable it in the browser and on the server
- (or in the IDE)

- Only the firefox one does tracing

Timing Points

Firebug - still relevant? I guess in FF
YSLOW 	- This will give you grades for your whole website

	- grade F for using a CDN

	- grade A for few HTTP requests

	- F for empty IMG tags


TLDR; Enable Trace, Use FF XDEBUG

XH prof

- LOOKS COOL. We gotta get on this...
- kcachegrind - Cool GUI thing, like what XHprof did.

http://derickrethans.nl/talks/profiling-lonestar13 

	
